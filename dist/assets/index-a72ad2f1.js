const a="/api",s=async t=>{try{const e=await fetch(`${a}/${t}`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}catch(e){throw console.error(`Error fetching ${t}:`,e),e}},o={getStats:()=>s("stats.json").then(t=>t.stats),getRecentOrders:()=>s("orders.json").then(t=>t.orders.map(e=>({...e,date:new Date(e.date)}))),getRecentActivities:()=>s("activities.json").then(t=>t.activities)},n={getProducts:()=>s("products.json").then(t=>t.products.map(e=>({...e,createdAt:new Date(e.createdAt)}))),getCategories:()=>s("products.json").then(t=>t.categories),getProduct:t=>s("products.json").then(e=>e.products.find(r=>r.id===parseInt(t))),createProduct:t=>new Promise(e=>{setTimeout(()=>{e({...t,id:Date.now(),createdAt:new Date})},500)}),updateProduct:(t,e)=>new Promise(r=>{setTimeout(()=>{r({...e,id:parseInt(t),updatedAt:new Date})},500)}),deleteProduct:t=>new Promise(e=>{setTimeout(()=>{e({message:"Product deleted successfully"})},500)})},c={delay:(t=1e3)=>new Promise(e=>setTimeout(e,t)),formatError:t=>t.message?t.message:typeof t=="string"?t:"เกิดข้อผิดพลาดในการโหลดข้อมูล"};export{c as a,o as d,n as p};
